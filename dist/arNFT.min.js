! function() {
"use strict";
var e = function(e, t, a) {
this.width = e, this.height = t, this.root = new THREE.Object3D, this.root.matrixAutoUpdate = !1, this.config = a, this.version = "0.3.0", console.log("ARnft ", this.version)
};
e.prototype.init = function(n, i) {
console.log("ARnft init() %cstart...", "color: yellow; background-color: blue; border-radius: 4px; padding: 2px");
this.cameraPara;
var o = this.root;
(async function(e, t) {
return await new Promise((function(t, a) {
const n = new XMLHttpRequest;
n.open("GET", e), n.responseType = "json", n.onload = function() {
t(n.response)
}, n.onerror = function() {
a("error " + n.status)
}, n.send(null)
}))
})(this.config).then((function(r) {
! function(e) {
var t = document.createElement("div");
t.id = "loading";
var a = document.createElement("img");
a.src = e.loading.logo.src, a.alt = e.loading.logo.alt;
var n = document.createElement("span");
n.setAttribute("class", "loading-text"), n.innerText = e.loading.loadingMessage, t.appendChild(a), t.appendChild(n);
document.getElementById("marker");
document.body.insertBefore(t, document.body.firstChild)
}(r),
function(e) {
if(e) {
var t = document.createElement("div");
t.id = "stats", t.className = "ui stats";
var a = document.createElement("div");
a.id = "stats1", a.className = "stats-item";
var n = document.createElement("p");
n.className = "stats-item-title", n.innerText = "Main", a.appendChild(n), t.appendChild(a);
var i = document.createElement("div");
i.id = "stats2", i.className = "stats-item";
var o = document.createElement("p");
o.className = "stats-item-title", o.innerText = "Worker", i.appendChild(o), t.appendChild(i);
var r = document.getElementById("loading");
document.body.insertBefore(t, r)
}
}(i);
var d, s, c = function() {
var e = document.createElement("div");
e.id = "app";
var t = document.createElement("canvas");
t.id = "canvas";
var a = document.createElement("video");
a.id = "video", a.setAttribute("autoplay", ""), a.setAttribute("muted", ""), a.setAttribute("playsinline", ""), e.appendChild(a), e.appendChild(t);
var n = document.getElementById("loading");
return document.body.insertBefore(e, n), {
container: e,
canvas: t,
video: a
}
}(),
l = (c.container, c.canvas),
u = c.video;
i && ((d = new Stats).showPanel(0), document.getElementById("stats1").appendChild(d.dom), (s = new Stats).showPanel(0), document.getElementById("stats2").appendChild(s.dom)),
function(n, i, o, r, d, s, c) {
var l = c.videoSettings.facingMode || "environment",
u = c.onError || function(e) {
console.error("ARnft internal getUserMedia", e)
},
g = !1,
m = ["touchstart", "touchend", "touchmove", "touchcancel", "click", "mousedown", "mouseup", "mousemove", "keydown", "keyup", "keypress", "scroll"],
v = function() {
g && (o.play().then((function() {
! function(e, n, i, o, r, d, s, c, l, u) {
var g, m, v, p, h, f, w, y, E, M, b, x, S, k = document.createElement("canvas"),
T = k.getContext("2d"),
R = new THREE.WebGLRenderer({
canvas: d,
alpha: u.renderer.alpha,
antialias: u.renderer.antialias,
precision: u.renderer.precision
});
R.setPixelRatio(window.devicePixelRatio);
var U = new THREE.Scene,
L = new THREE.Camera;
L.matrixAutoUpdate = !1, U.add(L);
var A = new THREE.AmbientLight(16777215);
U.add(A), U.add(l);
var N;

function C() {
self.onmessage = function(n) {
var i = n.data;
switch (i.type) {
case "load":
return void
function(e) {
var n = self.origin;
console.debug("Base path:", n);
var i = n + "/" + e.artoolkitUrl;
console.debug("Importing WASM lib from: ", i), importScripts(i), self.addEventListener("artoolkitNFT-loaded", (function() {
var i = n + "/" + e.camera_para;
console.debug("Loading camera at:", i);
var o = new ARCameraParamNFT(i, (function() {
var i = (t = new ARControllerNFT(e.pw, e.ph, o)).getCameraMatrix();
t.addEventListener("getNFTMarker", (function(e) {
a = {
type: "found",
matrixGL_RH: JSON.stringify(e.data.matrixGL_RH),
proj: JSON.stringify(i)
}
}));
var r = n + "/" + e.marker;
console.debug("Loading NFT marker at: ", r), t.loadNFTMarker(r, (function(e) {
t.trackNFTMarkerId(e), console.log("loadNFTMarker -> ", e), postMessage({
type: "endLoading",
end: !0
})
})), postMessage({
type: "loaded",
proj: JSON.stringify(i)
})
}), (function(e) {
console.error(e)
}))
}))
}(i);
case "process":
return e = i.imagedata, void
function() {
a = null, t && t.process && t.process(e);
a ? postMessage(a) : postMessage({
type: "not found"
});
e = null
}()
}
};
var e = null,
t = null,
a = null
}
var H = function(e) {
N = e ? JSON.parse(e.matrixGL_RH) : null
},
I = Date.now();

function j() {
T.fillStyle = "black", T.fillRect(0, 0, E, M), T.drawImage(i, 0, 0, g, m, b, x, w, y);
var e = T.getImageData(0, 0, E, M);
S.postMessage({
type: "process",
imagedata: e
}, [e.data.buffer])
}
var O = function() {
W(), requestAnimationFrame(O)
},
W = function() {
s();
var e = Date.now();
if(e - I, I = e, N) {
l.visible = !0;
for(var n = 0; n < 16; n++) t.delta[n] = N[n] - t.interpolated[n], t.interpolated[n] = t.interpolated[n] + t.delta[n] / 24;
a(l.matrix, t.interpolated)
} else l.visible = !1;
R.render(U, L)
};
(function() {
g = o, m = r, h = 320 / Math.max(g, m / 3 * 4), f = /Android|mobile|iPad|iPhone/i.test(navigator.userAgent) ? window.outerWidth / o : 1, v = g * f, p = m * f, w = g * h, y = m * h, E = Math.max(w, y / 3 * 4), M = Math.max(y, w / 4 * 3), b = (E - w) / 2, x = (M - y) / 2, k.style.clientWidth = E + "px", k.style.clientHeight = M + "px", k.width = E, k.height = M, R.setSize(v, p);
var e = new Blob([C.toString().replace(/^function .+\{?|\}$/g, "")], {
type: "text/js-worker"
}),
t = URL.createObjectURL(e);
(S = new Worker(t)).postMessage({
type: "load",
pw: E,
ph: M,
camera_para: u.cameraPara,
marker: n,
artoolkitUrl: u.artoolkitUrl
}), S.onmessage = function(e) {
var t = e.data;
switch (t.type) {
case "loaded":
var n = JSON.parse(t.proj),
i = E / w,
o = M / y;
n[0] *= i, n[4] *= i, n[8] *= i, n[12] *= i, n[1] *= o, n[5] *= o, n[9] *= o, n[13] *= o, a(L.projectionMatrix, n);
break;
case "endLoading":
if(1 == t.end) {
var r = document.getElementById("loading");
r && (r.querySelector(".loading-text").innerText = "Start the tracking!", setTimeout((function() {
r.parentElement.removeChild(r)
}), 2e3))
}
break;
case "found":
H(t);
break;
case "not found":
H(null)
}
c(), j()
}
})(), O(), j()
}(0, i, o, o.videoWidth, o.videoHeight, r, (function() {
s.stats && s.statsMain.update()
}), (function() {
s.stats && s.statsWorker.update()
}), d, c)
})).catch((function(t) {
u(t), e._teardownVideo(o)
})), o.paused || m.forEach((function(e) {
window.removeEventListener(e, v, !0)
})))
};
m.forEach((function(e) {
window.addEventListener(e, v, !0)
}));
var p = function(e) {
if(window.URL.createObjectURL) try {
o.srcObject = e
} catch (e) {}
o.srcObject = e, g = !0, o.autoplay = !0, o.playsInline = !0, v()
},
h = {},
f = {};
c.videoSettings.width && (f.width = c.videoSettings.width, "object" == typeof c.videoSettings.width ? (c.videoSettings.width.max && (h.maxWidth = c.videoSettings.width.max), c.videoSettings.width.min && (h.minWidth = c.videoSettings.width.min)) : h.maxWidth = c.videoSettings.width);
c.videoSettings.height && (f.height = c.videoSettings.height, "object" == typeof c.videoSettings.height ? (c.videoSettings.height.max && (h.maxHeight = c.videoSettings.height.max), c.videoSettings.height.min && (h.minHeight = c.videoSettings.height.min)) : h.maxHeight = c.videoSettings.height);
f.facingMode = l, f.deviceId = c.videoSettings.deviceId, navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
var w = {
audio: !1,
video: h
};
navigator.mediaDevices || window.MediaStreamTrack.getSources ? navigator.mediaDevices ? navigator.mediaDevices.getUserMedia({
audio: !1,
video: f
}).then(p, u) : window.MediaStreamTrack.getSources((function(e) {
var t = f.facingMode;
l && l.exact && (t = l.exact);
for(var a = 0; a < e.length; a++)
if("video" === e[a].kind && e[a].facing === t) {
w.video.mandatory.sourceId = e[a].id;
break
} l && l.exact && !w.video.mandatory.sourceId ? u("Failed to get camera facing the wanted direction") : navigator.getUserMedia ? navigator.getUserMedia(w, p, u) : u("navigator.getUserMedia is not supported on your browser")
})) : navigator.getUserMedia ? navigator.getUserMedia(w, p, u) : u("navigator.getUserMedia is not supported on your browser")
}(0, n, u, l, o, {
statsMain: d,
statsWorker: s,
stats: i
}, r)
}))
}, e.prototype.add = function(e) {
this.root.add(e)
}, e.prototype.loadModel = function(e, t, a, n, i) {
var o, r = this.root;
(new THREE.GLTFLoader).load(e, (function(e) {
(o = e.scene).scale.set(i, i, i), o.rotation.x = Math.PI / 2, o.position.x = t, o.position.y = a, o.position.z = n, o.matrixAutoUpdate = !1, r.add(o)
}))
}, e._teardownVideo = function(e) {
e.srcObject.getVideoTracks()[0].stop(), e.srcObject = null, e.src = null
};
var t = {
delta: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
interpolated: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
},
a = function(e, t) {
var a = [];
for(var n in t) a[n] = t[n];
"function" == typeof e.elements.set ? e.elements.set(a) : e.elements = [].slice.call(a)
};
window.ARnft = e, window.THREE = THREE
}();
